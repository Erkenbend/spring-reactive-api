/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (4.3.1).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package com.example.spring_reactive.api.spring_server.handler;

import com.example.spring_reactive.api.spring_server.model.Error;
import com.example.spring_reactive.api.spring_server.model.Thing;
import io.swagger.annotations.*;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.CookieValue;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestHeader;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RequestPart;
import org.springframework.web.multipart.MultipartFile;
import org.springframework.web.server.ServerWebExchange;
import reactor.core.publisher.Flux;
import reactor.core.publisher.Mono;

import javax.validation.Valid;
import javax.validation.constraints.*;
import java.util.List;
import java.util.Map;
import java.util.Optional;
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.SpringCodegen", date = "2020-11-24T22:00:38.774876400+01:00[Europe/Berlin]")

@Validated
@Api(value = "Things", description = "the Things API")
public interface ThingsApi {

    /**
     * GET /things : List things
     * This takes some time
     *
     * @param nbThings How many things to return (required)
     * @return A list of things (status code 200)
     *         or Unexpected error (status code 200)
     */
    @ApiOperation(value = "List things", nickname = "listThings", notes = "This takes some time", response = Thing.class, responseContainer = "List", tags={ "things", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "A list of things", response = Thing.class, responseContainer = "List"),
        @ApiResponse(code = 200, message = "Unexpected error", response = Error.class) })
    @RequestMapping(value = "/things",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    default Mono<ResponseEntity<Flux<Thing>>> listThings(@NotNull @ApiParam(value = "How many things to return", required = true) @Valid @RequestParam(value = "nbThings", required = true) Integer nbThings, ServerWebExchange exchange) {
        Mono<Void> result = Mono.empty();
        exchange.getResponse().setStatusCode(HttpStatus.NOT_IMPLEMENTED);
        for (MediaType mediaType : exchange.getRequest().getHeaders().getAccept()) {
            if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                String exampleString = "{ \"id\" : 0, \"content\" : \"content\" }";
                result = ApiUtil.getExampleResponse(exchange, exampleString);
                break;
            }
        }
        return result.then(Mono.empty());

    }

}
